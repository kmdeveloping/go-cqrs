// Code generated by gen-handler-registry. DO NOT EDIT.

package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"strings"

	"github.com/kmdeveloping/go-cqrs/core/cqrs"
	"github.com/kmdeveloping/go-cqrs/example/handlers"
)

func BootstrapCqrs() {
	m := cqrs.NewCqrsManager()
	m.UseDefaultDecorators()
	autoRegisterHandlers()
}

func autoRegisterHandlers() {
	types := getHandlerNames()
	for _, typeName := range types {
		switch typeName {
		case "SomeEventHandler":
			handler := &handlers.SomeEventHandler{}
			cqrs.RegisterEventHandler(handler)
		case "SomeOtherEventHandler":
			handler := &handlers.SomeOtherEventHandler{}
			cqrs.RegisterEventHandler(handler)
		case "DoSomethingCommandValidator":
			handler := &handlers.DoSomethingCommandValidator{}
			cqrs.RegisterValidator(handler)
		case "DoThatCommandHandler":
			handler := &handlers.DoThatCommandHandler{}
			cqrs.RegisterCommandHandler(handler)
		case "GetNameQueryHandler":
			handler := &handlers.GetNameQueryHandler{}
			cqrs.RegisterQueryHandler(handler)
		default:
			fmt.Printf("Unknown handler type: %s\n", typeName)
		}
	}
}

// getHandlerNames returns a list of handler type names by parsing Go files
func getHandlerNames() []string {
	var handlers []string

	// Set up the file set
	fset := token.NewFileSet()

	// Parse the handlers directory
	pkgs, err := parser.ParseDir(fset, "handlers", nil, 0)
	if err != nil {
		return []string{}
	}

	// Iterate through all packages
	for _, pkg := range pkgs {
		// Iterate through all files in the package
		for _, file := range pkg.Files {
			// Look for type declarations
			for _, decl := range file.Decls {
				if genDecl, ok := decl.(*ast.GenDecl); ok {
					for _, spec := range genDecl.Specs {
						if typeSpec, ok := spec.(*ast.TypeSpec); ok {
							typeName := typeSpec.Name.Name
							// Only add types that end with Handler or Validator
							if strings.HasSuffix(typeName, "Handler") ||
								strings.HasSuffix(typeName, "Validator") {
								handlers = append(handlers, typeName)
							}
						}
					}
				}
			}
		}
	}

	return handlers
}
